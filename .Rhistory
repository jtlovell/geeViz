mis <- al[!al %in% wh]
mis
featureOrder <- featureOrder[wh]
featureOrder
featureOrder <- unique(feats$type)
wh <- c(grep("CDS|EXON", toupper(featureOrder)),
grep("CENK", toupper(featureOrder)),
grep("CDS|EXON|CENK|UNKNOWN|INTRON", toupper(featureOrder), invert = T),
grep("INTRON", toupper(featureOrder)),
grep("UNKNOWN", toupper(featureOrder)))
wh <- wh[!duplicated(wh)]
if(length(wh) < length(featureOrder)){
al <- 1:length(featureOrder)
mis <- al[!al %in% wh]
wh <- c(wh, mis)
}
featureOrder <- featureOrder[wh]
featureOrder
feats$type <- factor(feats$type, levels = featureOrder)
feats <- feats[order(feats$type),]
feats
unique(feats$type)
# -- 6. Process the input so that it is hierarchical
featsH <- make_hierarchical(feats)
?make_hierarchical
make_hierarchical
feats
feats$type <- as.character(feats$type)
# -- 6. Process the input so that it is hierarchical
featsH <- make_hierarchical(feats)
x <- feats
if(ncol(elementMetadata(x)) == 0)
return(x)
grpDat <- elementMetadata(x)[,1]
if(length(unique(grpDat)) == 1)
return(x)
x
if(is.factor(grpDat)){
u <- levels(grpDat)
}else{
u <- unique(grpDat)
}
u
x <- makeGRangesFromDataFrame(as.data.frame(x))
x <- makeGRangesFromDataFrame(as.data.frame(x))
x$grp <- as.character(grpDat)
spl <- split(x, x$grp)[u]
spl
roxygen2::roxygenise()
# -- 6. Process the input so that it is hierarchical
featsH <- make_hierarchical(feats)
featsH
table(featsH$grp)
table(feats$grp)
table(feats$type)
unique(feats$type)
unique(featsH$grp)
roxygen2::roxygenise()
# -- 6. Process the input so that it is hierarchical
featsH <- make_hierarchical(feats)
table(featsH$grp)
featsH$grp
levels(featsH$grp)
unique(featsH$grp)
roxygen2::roxygenise()
tst <- classify_genome(
featuresGr = featsH,
trainingGr = NULL,
dnaSS = ss,
# maskGr = cens2mask,
centromeres = cens,
width = 500e3,
step = 10e3,
teloBuffer = 10e3,
centroBuffer = 2e6,
trainWidth = 3e6,
minProb2assign = .75,
ignoreCentromeres = F)
cenRegs <- fread(
"/Users/jlovell/Desktop/pennycressCSP/Thlaspi_centromere_candidate_regions20241202.csv",
select = c(1:4), col.names = c("seqnames", "start", "end", "genome"))
cenRegs[,width := end - start]
setorder(cenRegs, genome, seqnames, -width)
cenRegs <- subset(cenRegs, !duplicated(paste(genome, seqnames)))
cens <- makeGRangesFromDataFrame(subset(cenRegs, genome == "MN106"))
cens$grp <- "centromere"
cens
tst <- classify_genome(
featuresGr = featsH,
trainingGr = NULL,
dnaSS = ss,
# maskGr = cens2mask,
centromeres = cens,
width = 500e3,
step = 10e3,
teloBuffer = 10e3,
centroBuffer = 2e6,
trainWidth = 3e6,
minProb2assign = .75,
ignoreCentromeres = F)
roxygen2::roxygenise()
ss
tst <- classify_genome(
featuresGr = featsH,
trainingGr = NULL,
dnaSS = ss,
# maskGr = cens2mask,
centromeres = cens,
width = 500e3,
step = 10e3,
teloBuffer = 10e3,
centroBuffer = 2e6,
trainWidth = 3e6,
minProb2assign = .75,
ignoreCentromeres = F)
roxygen2::roxygenise()
tst <- classify_genome(
featuresGr = featsH,
trainingGr = NULL,
dnaSS = ss,
# maskGr = cens2mask,
centromeres = cens,
width = 500e3,
step = 10e3,
teloBuffer = 10e3,
centroBuffer = 2e6,
trainWidth = 3e6,
minProb2assign = .75,
ignoreCentromeres = F)
featsH
featuresGr <- featsH
"grp" %in% names(elementMetadata(featuresGr))
md <- elementMetadata(featuresGr)[,1]
head(md)
makeGRangesFromDataFrame(as.data.frame(featuresGr))
roxygen2::roxygenise()
tst <- classify_genome(
featuresGr = featsH,
trainingGr = NULL,
dnaSS = ss,
# maskGr = cens2mask,
centromeres = cens,
width = 500e3,
step = 10e3,
teloBuffer = 10e3,
centroBuffer = 2e6,
trainWidth = 3e6,
minProb2assign = .75,
ignoreCentromeres = F)
trainingWindows
roxygen2::roxygenise()
tst <- classify_genome(
featuresGr = featsH,
trainingGr = NULL,
dnaSS = ss,
# maskGr = cens2mask,
centromeres = cens,
width = 500e3,
step = 10e3,
teloBuffer = 10e3,
centroBuffer = 2e6,
trainWidth = 3e6,
minProb2assign = .75,
ignoreCentromeres = F)
featuresGr
trainingWindows
trainingCounts <- count_overlapsByGroup(
regions = trainingWindows,
features = featuresGr)
trainingCounts
featsH
count_overlapsByGroup
trainingWindows
roxygen2::roxygenise()
tst <- classify_genome(
featuresGr = featsH,
trainingGr = NULL,
dnaSS = ss,
# maskGr = cens2mask,
centromeres = cens,
width = 500e3,
step = 10e3,
teloBuffer = 10e3,
centroBuffer = 2e6,
trainWidth = 3e6,
minProb2assign = .75,
ignoreCentromeres = F)
##############################################################################
# 4. Count the features in the training regions
trainingCounts <- count_overlapsByGroup(
regions = trainingWindows,
features = featuresGr)
trainingCounts
trainDat <- data.table(as.data.frame(trainingCounts))
trainDat
trainDat[,fac2predict := gsub("Right|Left", "", grp)]
trainDat <- subset(trainDat, fac2predict %in% levs)
levs
levs <- c("subtelo", "peric", "centromere")
levs <- levs[order(levs)]
trainDat <- data.table(as.data.frame(trainingCounts))
# -- remove levt/right specification
trainDat[,fac2predict := gsub("Right|Left", "", grp)]
trainDat <- subset(trainDat, fac2predict %in% levs)
trainDat[,fac2predict := factor(fac2predict, levels = levs)]
trainDat
levs
trainDat <- data.table(as.data.frame(trainingCounts))
trainDat
# -- remove levt/right specification
trainDat[,fac2predict := gsub("Right|Left", "", region)]
trainDat <- subset(trainDat, fac2predict %in% levs)
trainDat
trainDat[,fac2predict := factor(fac2predict, levels = levs)]
# -- reformat to wide
print(trainDat)
trainDat <- dcast(
trainDat,
seqnames + start + end + fac2predict ~ grp,
value.var = "prop")
trainDat
trainDat
trainDat <- data.table(as.data.frame(trainingCounts))
# -- remove levt/right specification
trainDat[,fac2predict := gsub("Right|Left", "", region)]
trainDat <- subset(trainDat, fac2predict %in% levs)
trainDat[,fac2predict := factor(fac2predict, levels = levs)]
trainDat <- dcast(
trainDat,
seqnames + start + end + fac2predict ~ class,
value.var = "prop")
trainDat
trainDat <- data.table(as.data.frame(trainingCounts))
# -- remove levt/right specification
trainDat[,fac2predict := gsub("Right|Left", "", region)]
trainDat <- subset(trainDat, fac2predict %in% levs)
trainDat[,fac2predict := factor(fac2predict, levels = levs)]
# -- reformat to wide
print(trainDat)
trainDat <- dcast(
trainDat,
seqnames + start + end + fac2predict ~ grp,
value.var = "prop")
trainDat
table(trainDat$fac2predict)
roxygen2::roxygenise()
tst <- classify_genome(
featuresGr = featsH,
trainingGr = NULL,
dnaSS = ss,
# maskGr = cens2mask,
centromeres = cens,
width = 500e3,
step = 10e3,
teloBuffer = 10e3,
centroBuffer = 2e6,
trainWidth = 3e6,
minProb2assign = .75,
ignoreCentromeres = F)
roxygen2::roxygenise()
tst <- classify_genome(
featuresGr = featsH,
trainingGr = NULL,
dnaSS = ss,
# maskGr = cens2mask,
centromeres = cens,
width = 500e3,
step = 10e3,
teloBuffer = 10e3,
centroBuffer = 2e6,
trainWidth = 3e6,
minProb2assign = .75,
ignoreCentromeres = F)
roxygen2::roxygenise()
tst <- classify_genome(
featuresGr = featsH,
trainingGr = NULL,
dnaSS = ss,
# maskGr = cens2mask,
centromeres = cens,
width = 500e3,
step = 10e3,
teloBuffer = 10e3,
centroBuffer = 2e6,
trainWidth = 3e6,
minProb2assign = .75,
ignoreCentromeres = F)
feats$type <- gsub("[^[:alnum:] ]", "", feats$type)
# -- 6. Process the input so that it is hierarchical
featsH <- make_hierarchical(feats)
tst <- classify_genome(
featuresGr = featsH,
trainingGr = NULL,
dnaSS = ss,
# maskGr = cens2mask,
centromeres = cens,
width = 500e3,
step = 10e3,
teloBuffer = 10e3,
centroBuffer = 2e6,
trainWidth = 3e6,
minProb2assign = .75,
ignoreCentromeres = F)
roxygen2::roxygenise()
tst <- classify_genome(
featuresGr = featsH,
trainingGr = NULL,
dnaSS = ss,
# maskGr = cens2mask,
centromeres = cens,
width = 500e3,
step = 10e3,
teloBuffer = 10e3,
centroBuffer = 2e6,
trainWidth = 3e6,
minProb2assign = .75,
ignoreCentromeres = F)
991.85/5
991.85+200
rm(list = ls())
repGff3File <- "/Users/jlovell/Downloads/download.20250123.151645/Phytozome/PhytozomeV13/Tarvensevar_MN106/v4.1/annotation/Tarvensevar_MN106_872_v4.1.repeatmasked_assembly_v4.0.gff3.gz"
geneGff3File <- "/Users/jlovell/Desktop/pennycressCSP/genomes/MN106/Tarvensevar_MN106_872_v4.1.gene.gff3.gz"
assemFaFile <- "/Users/jlovell/Desktop/pennycressCSP/genomes/MN106/Tarvensevar_MN106_872_v4.0.fa.gz"
chrNamesStrip <- "\\s.*"
kmerSeqs <- fread("/Users/jlovell/Downloads/MN106_processed_repeats (1).csv")
kmerSeqs <- c(kmerSeqs$consensus.primary, kmerSeqs$consensus.secondary)
kmerSeqs <- kmerSeqs[!duplicated(kmerSeqs)]
kmerSeqs <- DNAStringSet(kmerSeqs[grepl("A|C|G|T", kmerSeqs)])
cenKmerSS = kmerSeqs
cenKmerGap = 500
cens2mask <- makeGRangesFromDataFrame(
fread("/Users/jlovell/Downloads/MN106_satellite_regions_20250127.csv",
col.names = c("chr", "start", "end", "id")))
cenRegs <- fread(
"/Users/jlovell/Desktop/pennycressCSP/Thlaspi_centromere_candidate_regions20241202.csv",
select = c(1:4), col.names = c("seqnames", "start", "end", "genome"))
cenRegs[,width := end - start]
setorder(cenRegs, genome, seqnames, -width)
cenRegs <- subset(cenRegs, !duplicated(paste(genome, seqnames)))
cens <- makeGRangesFromDataFrame(subset(cenRegs, genome == "MN106"))
cens$grp <- "centromere"
# -- 1. read in the fasta, rename the chrs
ss <- Biostrings::readDNAStringSet(assemFaFile)
names(ss) <- gsub(chrNamesStrip, "", names(ss))
# -- 2. read in the cds
geneGr <- read_gffAsGr(
gff3File = geneGff3File,
filter = list(type = c("CDS", "gene")),
reduceIt = TRUE,
extraCol2keep = "type")
geneGr$type[geneGr$type == "gene"] <- "intron"
# -- 3. read in the repeats
repGr <- read_gffAsGr(
gff3File = repGff3File,
extraCol2keep = "class",
reduceIt = TRUE)
repGr$type <- repGr$class
repGr$class <- NULL
# -- 4. If centromere sequences are given, find them
if(!is.null(cenKmerSS)){
cenGr <- pull_kmerBlocks(
kmerSS = cenKmerSS,
assemblySS = ss,
maxGap2join = cenKmerGap)
cenGr$type <- "cenKmers"
cenGr$matchProp <- cenGr$matchBases <- NULL
feats <- c(geneGr, repGr, cenGr)
}else{
feats <- c(geneGr, repGr)
}
# -- 5. combine and sort by annotation type
if(is.null(featureOrder)){
featureOrder <- unique(feats$type)
wh <- c(grep("CDS|EXON", toupper(featureOrder)),
grep("CENK", toupper(featureOrder)),
grep("CDS|EXON|CENK|UNKNOWN|INTRON", toupper(featureOrder), invert = T),
grep("INTRON", toupper(featureOrder)),
grep("UNKNOWN", toupper(featureOrder)))
wh <- wh[!duplicated(wh)]
if(length(wh) < length(featureOrder)){
al <- 1:length(featureOrder)
mis <- al[!al %in% wh]
wh <- c(wh, mis)
}
featureOrder <- featureOrder[wh]
}
# -- 5. combine and sort by annotation type
featureOrder <- NULL
if(is.null(featureOrder)){
featureOrder <- unique(feats$type)
wh <- c(grep("CDS|EXON", toupper(featureOrder)),
grep("CENK", toupper(featureOrder)),
grep("CDS|EXON|CENK|UNKNOWN|INTRON", toupper(featureOrder), invert = T),
grep("INTRON", toupper(featureOrder)),
grep("UNKNOWN", toupper(featureOrder)))
wh <- wh[!duplicated(wh)]
if(length(wh) < length(featureOrder)){
al <- 1:length(featureOrder)
mis <- al[!al %in% wh]
wh <- c(wh, mis)
}
featureOrder <- featureOrder[wh]
}
feats$type <- factor(feats$type, levels = featureOrder)
feats <- feats[order(feats$type),]
feats$type <- as.character(feats$type)
feats$type <- gsub("[^[:alnum:] ]", "", feats$type)
# -- 6. Process the input so that it is hierarchical
featsH <- make_hierarchical(feats)
featuresGr = featsH
trainingGr = NULL
dnaSS = ss
centromeres = cens
maskGr = NULL
width = 1e6
step = 50e3
teloKmers = c("CCCGAAA", "CCCTAAA")
stripChrName = "\\s.*"
teloBuffer = 50e3
centroBuffer = 1e6
subteloMinGeneDensity = .1
pericenMaxGeneDensity = 0.25
trainWidth = width * 2
minProb2assign = .75
ignoreCentromeres = TRUE
minRunLength = ceiling((0.5 *width)/step)
verbose = TRUE
md <- elementMetadata(featuresGr)[,1]
featuresGr <- makeGRangesFromDataFrame(as.data.frame(featuresGr))
featuresGr$type <- md
featuresGr
# ignoreCentromeres <- TRUE
##############################################################################
# 1. Make the training intervals for subtelomeres
subtelos <- makeGRangesFromDataFrame(rbind(
data.table(
grp = "subteloLeft",
seqnames = names(dnaSS),
start = teloBuffer,
end = teloBuffer + trainWidth),
data.table(
grp = "subteloRight",
seqnames = names(dnaSS),
start = width(dnaSS) - (teloBuffer + trainWidth),
end = width(dnaSS) -  teloBuffer)), keep.extra.columns = T)
subtelos
##############################################################################
# 2. Make the training intervals for the pericentromeres
if(!is.null(trainingGr)){
trainingRegions <- trainingGr
}else{
tmp <- data.table(as.data.frame(centromeres))
perics <- makeGRangesFromDataFrame(rbind(
with(tmp, data.table(
grp = "pericLeft",
seqnames = seqnames,
start = start - (centroBuffer + trainWidth),
end = start - centroBuffer)),
with(tmp, data.table(
grp = "pericRight",
seqnames = seqnames,
start = end + centroBuffer,
end = end + (centroBuffer + trainWidth)))), keep.extra.columns = T)
# -- Join the training regions
trainingRegions <- sort(c(subtelos, perics))
}
roxygen2::roxygenise()
tst <- classify_genome(
featuresGr = featsH,
trainingGr = NULL,
dnaSS = ss,
# maskGr = cens2mask,
centromeres = cens,
width = 500e3,
step = 10e3,
teloBuffer = 10e3,
centroBuffer = 1e6,
trainWidth = 3e6,
minProb2assign = .75,
ignoreCentromeres = F)
blks
ggplot()+
# geom_segment(data = tst$trained, aes(x = start, xend = end, y = fac2predict), col = "black", linewidth = 1)+
# geom_segment(data = tst$trained, aes(x = start, xend = end, y = fac2predict, col = fac2predict))+
geom_jitter(data = tst$predicted, aes(x = (start + end)/2, y = bestAssign, col = bestAssign), pch = ".")+
geom_segment(data = tst$blks, aes(x = start, xend = end, y = bestAssign), col = "black")+
facet_wrap(~seqnames, ncol = 1, scale = "free_x")
tst$trained
with(tst$trained, table(bestAssign, fac2predict))
tst <- classify_genome(
featuresGr = featsH,
trainingGr = NULL,
dnaSS = ss,
# maskGr = cens2mask,
centromeres = cens,
width = 500e3,
step = 10e3,
teloBuffer = 10e3,
centroBuffer = 1e6,
trainWidth = 3e6,
minProb2assign = .75,
ignoreCentromeres = T)
ggplot()+
# geom_segment(data = tst$trained, aes(x = start, xend = end, y = fac2predict), col = "black", linewidth = 1)+
# geom_segment(data = tst$trained, aes(x = start, xend = end, y = fac2predict, col = fac2predict))+
geom_jitter(data = tst$predicted, aes(x = (start + end)/2, y = bestAssign, col = bestAssign), pch = ".")+
geom_segment(data = tst$blks, aes(x = start, xend = end, y = bestAssign), col = "black")+
facet_wrap(~seqnames, ncol = 1, scale = "free_x")
630+950+3500
5080/3
chrNamesStrip
rm(list = ls())
